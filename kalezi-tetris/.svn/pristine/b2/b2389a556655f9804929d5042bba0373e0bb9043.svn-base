package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;
import javax.swing.Timer;

import model.Board;
import model.MovableTetrisPiece;
import model.TetrisPiece;

public class BoardPanel extends JPanel implements Observer {
    protected Board myBoard;
    
    private static final int WIDTH = 500;
    private static final int HEIGHT = 700;
    private static int BEGINNING_DELAY = 1000;
    private static final int SUBTRACT_TIMER = 100;
    private static final int BLOCK_SIZE = 20;
    private static final int BOARD_WIDTH = 10;
    private static final int BOARD_HEIGHT = 20;
    
    private Timer myTimer;
    
    
    
    public BoardPanel (Board theBoard) {
        super();
        
        myBoard = theBoard;
        setPreferredSize(new Dimension(WIDTH, HEIGHT));
        setBackground(Color.WHITE);
        
        myTimer = new Timer(BEGINNING_DELAY, new TimerListener());
        myTimer.start();
    }
    
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);       
        myBoard.newGame();
        drawCurrentPiece(g2d);
        
    }
    private void drawCurrentPiece(final Graphics2D theg2d) {
        final MovableTetrisPiece currentPiece = myBoard.getCurrentPiece();
        theg2d.setColor(Color.BLUE);
        theg2d.fill3DRect(currentPiece.getPosition().getX(), currentPiece.getPosition().getY()
                          , currentPiece.getHeight(), currentPiece.getWidth(), true);
    }
//    private void drawFrozenBlocks(final Graphics2D theg2d) {
//        for (int i = BOARD_HEIGHT - 1; i >= 0; i--) {
//            for (int k = 0; k < BOARD_WIDTH; k++) {
//                theg2d.fill3DRect(BLOCK_SIZE, HEIGHT, BLOCK_SIZE, BLOCK_SIZE, true);
//            }
//        }
//    }

    @Override
    public void update(Observable theObservable, Object theObj) {
        repaint();
        
    }
    
    private class TimerListener implements ActionListener {
        public void actionPerformed(final ActionEvent theEvent) {
            myBoard.down();
           
        }
    }
}
