/* 
 * TCSS 305 – Autumn 2016
 * Assignment 6a – Tetris-a
 */

package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;
import javax.swing.Timer;

import model.Board;

/** This class is used to create the panel for the game.
 * 
 * @author Igor Kalezic
 * @version 2 December 2016
 */
public class BoardPanel extends JPanel implements Observer {
    
    /**
     * Serialization.
     */
    private static final long serialVersionUID = 1305482449342015453L;

    /**
     * Static field that holds the width.
     */
    private static final int WIDTH = 400;
    
    /**
     * Static field that holds the height.
     */
    private static final int HEIGHT = 800;
    
    /**
     * Initial timer delay.
     */
    private static final int BEGINNING_DELAY = 1000;
    
    /**
     * Static field that holds the block size.
     */  
    private static final int BLOCK_SIZE = 40;
    
    /**
     * Board field.
     */
    protected Board myBoard;
    

    
    /**
     * Timer field.
     */
    private Timer myTimer;
    
    
    /**
     * Constructor.
     * @param theBoard playing board.
     */
    public BoardPanel(final Board theBoard) {
        super();
        
        myBoard = theBoard;
        myBoard.addObserver(this);
        setPreferredSize(new Dimension(WIDTH, HEIGHT));
        setBackground(Color.WHITE);
        
        myTimer = new Timer(BEGINNING_DELAY, new TimerListener());
        myTimer.start();
        myBoard.newGame();
    }
    
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);       
        
        drawBoard(g2d);
        
        
    }


    @Override
    public void update(final Observable theObservable, final Object theObj) {
        
        repaint();
        
    }

    /**
     * Draws the pieces of the board.
     * @param theG2d Graphics.
     */
    public void drawBoard(final Graphics2D theG2d) {
        final String boardString = myBoard.toString();
        
        final String[] lines = boardString.split("\n");
        for (int i = 5; i < lines.length; i++) {
            final String line = lines[i];

            
            for (int j = 1; j < line.length(); j++) {
                if (line.charAt(j) != ' ') {
                    theG2d.setColor(Color.BLUE);
                    theG2d.fill3DRect((j - 1) * BLOCK_SIZE, (i - 5) * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE, true);
                } 
               
            }
        }
        
    }
     
    /**
     * Inner timer listener class.
     * 
     * @author Igor Kalezic
     *
     */
    private class TimerListener implements ActionListener {
        
        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            
            myBoard.down();
           
        }
    }
}
