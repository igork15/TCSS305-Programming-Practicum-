/* 
 * TCSS 305 – Autumn 2016
 * Assignment 6a – Tetris-a
 */

package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;

import keylisteners.KeyListeners;
import model.Board;
import model.TetrisPiece;

/** This class is used to create the GUI for the game.
 * 
 * @author Igor Kalezic
 * @version 2 December 2016
 */
public class TetrisGUI extends JFrame {
    
    /**
     * Serialization.
     */
    private static final long serialVersionUID = 4207812010507283766L;

    /**
     * Static next panel size field.
     */
    private static final int NEXT_PAN_SIZE = 160;
    
    /**
     * Static panel width field.
     */
    private static final int PAN_WIDTH = 400;
    
    /**
     * Static panel height field.
     */
    private static final int PAN_HEIGHT = 400;
    
    /**
     * Static frame size field.
     */
    private static final int FRAME_SIZE = 860;
    
    /**
     * Static width field.
     */
    private static final int WIDTH = 10;
    
    /**
     * Static height field.
     */
    private static final int HEIGHT = 20;
    
    /**
     * Board field.
     */
    private final Board myBoard;
    /**
     * Constructor.
     */
    public TetrisGUI() {
        super();
        myBoard = new Board(WIDTH, HEIGHT);
        
        final ArrayList<TetrisPiece> sequence = new ArrayList<TetrisPiece>();
        
        sequence.add(TetrisPiece.I);
        sequence.add(TetrisPiece.J);
        sequence.add(TetrisPiece.L);
        sequence.add(TetrisPiece.O);
        sequence.add(TetrisPiece.S);
        sequence.add(TetrisPiece.T);
        sequence.add(TetrisPiece.Z);
        
        myBoard.setPieceSequence(sequence);
    }
    
    /**
     * Start the GUI.
     */
    public void start() {
        
        final BoardPanel gameBoard = new BoardPanel(myBoard);
        
        setTitle("Igor Kalezic - Tetris");
        
        setPreferredSize(new Dimension(FRAME_SIZE, FRAME_SIZE));
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        final KeyListeners control = new KeyListeners(myBoard, gameBoard);
       
        addKeyListener(control);
        add(gameBoard, BorderLayout.WEST);
        
        final JPanel pan = new JPanel();
        pan.setBackground(Color.black);
        pan.setVisible(true);
        pan.setPreferredSize(new Dimension(PAN_WIDTH, PAN_HEIGHT));
        add(pan);
        final NextPiecePanel next = new NextPiecePanel(myBoard);
       
        next.setBackground(Color.GRAY);
        next.setPreferredSize(new Dimension(NEXT_PAN_SIZE, NEXT_PAN_SIZE));
        pan.add(next);
        setJMenuBar(createMenuBar());
        
        setResizable(false);
        pack();
        setVisible(true);
        
       
    }
    
    /**
     * Creates the menu bar.
     * @return JMenuBar.
     */
    public JMenuBar createMenuBar() {
        final JMenuBar bar = new JMenuBar();
        final JMenu help = new JMenu("Help");
        final JMenuItem controls = new JMenuItem("Controls");
        final HelpListener controlAction = new HelpListener();
        
        controls.addActionListener(controlAction);
        
        help.add(controls);
        bar.add(help);
        bar.setVisible(true);
        
        return bar;       
    }
    
    /**
     * Main Method.
     * 
     * @param theArgs ignored.
     */
    public static void main(final String[] theArgs) {
        final TetrisGUI gui = new TetrisGUI();
        gui.start();
    }

}
